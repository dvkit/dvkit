<project name="collect">
	<property environment="env"/>
	
	<property name="packages_dir" value="${basedir}/../packages"/>
	<property name="force" value="false"/>
	
	<property file="${basedir}/packages.properties"/>

	<!-- Use the host Eclipse -->
	<property name="eclipse.home" location="${env.ECLIPSE_HOME}"/>
	<condition property="eclipsec" 
		value="${eclipse.home}/eclipsec" 
		else="${eclipse.home}/eclipse">
		<os family="windows"/>
	</condition>
	
	<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
		<classpath path="${basedir}/xmltask.jar"/>
	</taskdef>

	<macrodef name="mirrorUpdate">
		<attribute name="source"/>
		<attribute name="dest"/>
		
		<sequential>
			<exec executable="${eclipsec}" failonerror="true">
				<arg value="-nosplash"/>
				<arg value="--launcher.suppressErrors"/>
				<arg value="-application"/>
				<arg value="org.eclipse.equinox.p2.artifact.repository.mirrorApplication"/>
				<arg value="-source"/>
				<arg value="@{source}"/>
				<arg value="-destination"/>
				<arg value="file://@{dest}"/>
			</exec>
			<exec executable="${eclipsec}" failonerror="true">
				<arg value="-nosplash"/>
				<arg value="--launcher.suppressErrors"/>
				<arg value="-application"/>
				<arg value="org.eclipse.equinox.p2.metadata.repository.mirrorApplication"/>
				<arg value="-source"/>
				<arg value="@{source}"/>
				<arg value="-destination"/>
				<arg value="file://@{dest}"/>
			</exec>
		</sequential>
	</macrodef>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: name                      
         - - - - - - - - - - - - - - - - - -->
    <target name="collect" 
    	depends="init,collect_eclipse,collect_cdt,collect_wst,
    	collect_emf,collect_dltk,collect_zest,collect_gef4,collect_vrapper,
    	collect_sveditor,collect_shelled,
    	collect_linuxtools,collect_epic,
    	collect_pydev,collect_egit">
            
    </target>
	
	<target name="init">
		<mkdir dir="${packages_dir}"/>
	</target>
	
	<!-- Eclipse SDK -->
	<target name="collect_eclipse" 
		depends="collect_eclipse_linux,collect_eclipse_linux_x86_64,
		collect_eclipse_win32,collect_eclipse_win32_x86_64,
		collect_eclipse_platform,collect_jdt"/>
	
	<condition property="fetch.eclipse.linux">
		<and>
			<or>
				<not>
					<available file="${packages_dir}/${eclipse_linux_tgz}"/>
				</not>
				<equals arg1="${force}" arg2="true"/>
			</or>
			<os name="linux"/>
			<not>
				<os arch="amd64"/>
			</not>
		</and>
	</condition>
	
	<target name="collect_eclipse_linux" if="${fetch.eclipse.linux}">
		<delete file="${packages_dir}/${eclipse_linux_tgz}"/>
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="${eclipse_release}/${eclipse_linux_tgz}"/>
		</exec>
	</target>	

	<condition property="fetch.eclipse.linux_x86_64">
		<and>
			<or>
				<not>
					<available file="${packages_dir}/${eclipse_linux_x86_64_tgz}"/>
				</not>
				<equals arg1="${force}" arg2="true"/>
			</or>
			<os name="linux"/>
			<os arch="amd64"/>
		</and>
	</condition>
	
	<target name="collect_eclipse_linux_x86_64" if="${fetch.eclipse.linux_x86_64}">
		<delete file="${packages_dir}/${eclipse_linux_x86_64_tgz}"/>
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="${eclipse_release}/${eclipse_linux_x86_64_tgz}"/>
		</exec>
	</target>
	
	<condition property="fetch.eclipse.win32">
		<and>
			<or>
				<not>
					<available file="${packages_dir}/${eclipse_win32_zip}"/>
				</not>
				<equals arg1="${force}" arg2="true"/>
			</or>
			<os name="windows"/>
			<not>
				<os arch="amd64"/>
			</not>
		</and>
	</condition>
	
	<target name="collect_eclipse_win32" if="${fetch.eclipse.win32}">
		<delete file="${packages_dir}/${eclipse_win32_zip}"/>
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<arg value="-nv"/>
			<!--
			-->
			<arg value="${eclipse_release}/${eclipse_win32_zip}"/>
		</exec>
	</target>	
	
	<condition property="fetch.eclipse.win32_x86_64">
		<and>
			<or>
				<not>
					<available file="${packages_dir}/${eclipse_win32_x86_64_zip}"/>
				</not>
				<equals arg1="${force}" arg2="true"/>
			</or>
			<!--
			<os name="windows"/>
			<os arch="amd64"/>
			  -->
		</and>
	</condition>
	
	<target name="collect_eclipse_win32_x86_64" if="${fetch.eclipse.win32_x86_64}">
		<delete file="${packages_dir}/${eclipse_win32_x86_64_zip}"/>
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="${eclipse_release}/${eclipse_win32_x86_64_zip}"/>
		</exec>
	</target>
	
	<!-- Eclipse Delta Pack -->
	<condition property="fetch.eclipse.platform">
		<or>
			<not>
				<available file="${packages_dir}/${eclipse_platform_zip}"/>
			</not>
			<equals arg1="${force}" arg2="true"/>
		</or>
	</condition>
	
	<target name="collect_eclipse_platform" if="${fetch.eclipse.platform}">
		<delete file="${packages_dir}/${eclipse_platform_zip}"/>
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="${eclipse_release}/${eclipse_platform_zip}"/>
		</exec>
	</target>

	<!-- Eclipse JDT -->
	<condition property="fetch.eclipse.jdt">
		<or>
			<not>
				<available file="${packages_dir}/${jdt_zip}"/>
			</not>
			<equals arg1="${force}" arg2="true"/>
		</or>
	</condition>
	
	<target name="collect_jdt" if="${fetch.eclipse.jdt}">
		<delete file="${packages_dir}/${jdt_zip}"/>
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="${mirror_ftp}/${jdt_release}/${jdt_zip}"/>
		</exec>
	</target>
				
	<!-- CDT -->
	<condition property="fetch.cdt">
		<or>
			<not>
				<available file="${packages_dir}/${cdt_zip}"/>
			</not>
			<equals arg1="${force}" arg2="true"/>
		</or>
	</condition>
	
	<target name="collect_cdt" if="${fetch.cdt}">
		<delete file="${packages_dir}/${cdt_zip}"/>
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="${mirror_ftp}/${cdt_release}/${cdt_zip}"/>
		</exec>
	</target>

	<!-- CDT -->
	<condition property="fetch.wst">
		<or>
			<not>
				<available file="${packages_dir}/${wst_zip}"/>
			</not>
			<equals arg1="${force}" arg2="true"/>
		</or>
	</condition>
	
	<target name="collect_wst" if="${fetch.wst}">
		<delete file="${packages_dir}/${wst_zip}"/>
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="${mirror_ftp}/${wst_release}/${wst_zip}"/>
		</exec>
	</target>
	
	<condition property="fetch.emf">
		<or>
			<not>
				<available file="${packages_dir}/${emf_zip}"/>
			</not>
			<equals arg1="${force}" arg2="true"/>
		</or>
	</condition>
	
	<target name="collect_emf" if="${fetch.emf}">
		<delete file="${packages_dir}/${emf_zip}"/>
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="${mirror_ftp}/${emf_release}/${emf_zip}"/>
		</exec>
	</target>
			
	<!-- DLTK -->
	<condition property="fetch.dltk">
		<or>
			<not>
				<available file="${packages_dir}/${dltk_zip}"/>
			</not>
			<equals arg1="${force}" arg2="true"/>
		</or>
	</condition>
	
	<target name="collect_dltk" if="${fetch.dltk}">
		<delete file="${packages_dir}/${dltk_zip}"/>
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="${mirror_ftp}/${dltk_release}/${dltk_zip}"/>
		</exec>
	</target>
	
	<!-- GEF Zest+Draw2d -->
	<condition property="fetch.zest">
		<or>
			<not>
				<available file="${packages_dir}/${zest_zip}"/>
			</not>
			<equals arg1="${force}" arg2="true"/>
		</or>
	</condition>
		
	<target name="collect_zest" if="${fetch.zest}">
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="${mirror_ftp}/${zest_release}/${zest_zip}"/>
		</exec>
	</target>

	<!-- GEF Zest+Draw2d -->
	<condition property="fetch.gef4">
		<or>
			<not>
				<available file="${packages_dir}/${gef4_zip}"/>
			</not>
			<equals arg1="${force}" arg2="true"/>
		</or>
	</condition>
		
	<target name="collect_gef4" if="${fetch.gef4}">
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="${mirror_ftp}/${gef4_release}/${gef4_zip}"/>
		</exec>
	</target>
		
	<!-- Vrapper -->
	<condition property="fetch.vrapper">
		<or>
			<not>
				<available file="${packages_dir}/${vrapper_zip}"/>
			</not>
			<equals arg1="${force}" arg2="true"/>
		</or>
	</condition>
	
	<target name="collect_vrapper" if="${fetch.vrapper}">
		<delete file="${packages_dir}/${vrapper_zip}"/>
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="-O"/>
			<arg value="${vrapper_zip}"/>
			<arg value="${vrapper_release}"/>
		</exec>
	</target>
	
	<!-- SVEditor -->
	<condition property="fetch.sveditor">
		<or>
			<not>
				<available file="${packages_dir}/${sveditor_zip}"/>
			</not>
			<equals arg1="${force}" arg2="true"/>
		</or>
	</condition>
	
	<target name="collect_sveditor" if="${fetch.sveditor}">
		<delete file="${packages_dir}/${sveditor_zip}"/>
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="-O"/>
			<arg value="${sveditor_zip}"/>
			<arg value="${sveditor_release}"/>
		</exec>
	</target>

	<!-- ELT -->
	<condition property="fetch.elt">
		<or>
			<not>
				<available file="${packages_dir}/${elt_zip}"/>
			</not>
			<equals arg1="${force}" arg2="true"/>
		</or>
	</condition>
	
	<target name="collect_elt" if="${fetch.elt}">
		<delete file="${packages_dir}/${elt_zip}"/>
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<arg value="--no-check-certificate"/>
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="-O"/>
			<arg value="${elt_zip}"/>
			<arg value="${elt_release}"/>
		</exec>
	</target>

	<!-- Shelled -->
	<condition property="fetch.shelled">
		<or>
			<not>
				<available file="${packages_dir}/${shelled_zip}"/>
			</not>
			<equals arg1="${force}" arg2="true"/>
		</or>
	</condition>
	
	<target name="collect_shelled" if="${fetch.shelled}">
		<delete file="${packages_dir}/${shelled_zip}"/>
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="-O"/>
			<arg value="${shelled_zip}"/>
			<arg value="${shelled_release}"/>
		</exec>
	</target>

	<!-- linuxtools -->
	<condition property="fetch.linuxtools">
		<or>
			<not>
				<available file="${packages_dir}/${linuxtools_zip}"/>
			</not>
			<equals arg1="${force}" arg2="true"/>
		</or>
	</condition>
	
	<target name="collect_linuxtools" if="${fetch.linuxtools}">
		<delete file="${packages_dir}/${linuxtools_zip}"/>
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="-O"/>
			<arg value="${linuxtools_zip}"/>
			<arg value="${mirror_ftp}/${linuxtools_release}"/>
		</exec>
	</target>

	<!-- WixTools -->
	<condition property="fetch.wixtools">
		<or>
			<not>
				<available file="${packages_dir}/${wixtools_zip}"/>
			</not>
			<equals arg1="${force}" arg2="true"/>
		</or>
	</condition>
	
	<target name="collect_wixtools" if="${fetch.wixtools}">
		<delete file="${packages_dir}/${wixtools_zip}"/>
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="-O"/>
			<arg value="${wixtools_zip}"/>
			<arg value="${wixtools_release}"/>
		</exec>
	</target>

	<!--
	<target name="collect_jre" depends="collect_jre_linux,
		collect_jre_linux_x86_64,collect_jre_win32,collect_jre_win32_x86_64">
	</target>
	
	<target name="collect_jre_linux" if="${fetch.jre_linux}">
	</target>
	  -->
	
	<condition property="fetch.epic">
		<or>
			<not>
				<available file="${packages_dir}/${epic_zip}"/>
			</not>
			<equals arg1="${force}" arg2="true"/>
		</or>
	</condition>
	
	<target name="collect_epic" if="fetch.epic">
		<delete file="${packages_dir}/${epic_zip}"/>
		<mkdir dir="${packages_dir}/epic"/>
		<mirrorUpdate source="${epic_updates}" dest="${packages_dir}/epic"/>
		<unzip src="${packages_dir}/epic/artifacts.jar"
			dest="${packages_dir}/epic"/>
		<delete file="${packages_dir}/epic/artifacts.jar"/>
		<xmltask source="${packages_dir}/epic/artifacts.xml"
			dest="${packages_dir}/epic/artifacts.xml">
			<remove path="//repositoryProperties"/>
		</xmltask>
		<zip destfile="${packages_dir}/${epic_zip}"
			basedir="${packages_dir}/epic"
			includes="**/*"/>
		<delete dir="${packages_dir}/epic"/>
	</target>

	<condition property="fetch.pydev">
		<or>
			<not>
				<available file="${packages_dir}/${pydev_zip}"/>
			</not>
			<equals arg1="${force}" arg2="true"/>
		</or>
	</condition>

	<target name="collect_pydev" if="fetch.pydev">
		<delete file="${packages_dir}/${pydev_zip}"/>
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<arg value="--no-check-certificate"/>
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="-O"/>
			<arg value="${pydev_zip}"/>
			<arg value="${pydev_release}"/>
		</exec>
<!--
		<mkdir dir="${packages_dir}/pydev"/>
		<mirrorUpdate source="${pydev_updates}" dest="${packages_dir}/pydev"/>
		<zip destfile="${packages_dir}/${pydev_zip}"
			basedir="${packages_dir}/pydev"
			includes="**/*"/>
		<delete dir="${packages_dir}/pydev"/>
  -->
	</target>

	<condition property="fetch.egit">
		<or>
			<not>
				<available file="${packages_dir}/${egit_zip}"/>
			</not>
			<equals arg1="${force}" arg2="true"/>
		</or>
	</condition>
	
	<target name="collect_egit" if="${fetch.egit}">
		<delete file="${packages_dir}/${egit_zip}"/>
		<exec executable="wget"
			failonerror="true"
			dir="${packages_dir}">
			<!--
			<arg value="-nv"/>
			  -->
			<arg value="-O"/>
			<arg value="${egit_zip}"/>
			<arg value="${egit_release}/${egit_zip}"/>
		</exec>
	</target>
</project>
